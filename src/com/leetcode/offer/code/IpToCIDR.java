package com.leetcode.offer.code;

import java.util.ArrayList;
import java.util.List;

/**
 * @author duson
 * 给定一个起始 IP 地址 ip 和一个我们需要包含的 IP 的数量 n，返回用列表（最小可能的长度）表示的 CIDR块的范围。 
 * <p>
 * CIDR 块是包含 IP 的字符串，后接斜杠和固定长度。例如：“123.45.67.89/20”。固定长度 “20” 表示在特定的范围中公共前缀位的长度。
 * <p>
 * 示例 1：
 * <p>
 * 输入：ip = "255.0.0.7", n = 10
 * 输出：["255.0.0.7/32","255.0.0.8/29","255.0.0.16/32"]
 * 解释：
 * 转换为二进制时，初始IP地址如下所示（为清晰起见添加了空格）：
 * 255.0.0.7 -> 11111111 00000000 00000000 00000111
 * 地址 "255.0.0.7/32" 表示与给定地址有相同的 32 位前缀的所有地址，
 * 在这里只有这一个地址。
 * <p>
 * 地址 "255.0.0.8/29" 表示与给定地址有相同的 29 位前缀的所有地址：
 * 255.0.0.8 -> 11111111 00000000 00000000 00001000
 * 有相同的 29 位前缀的地址如下：
 * 11111111 00000000 00000000 00001000
 * 11111111 00000000 00000000 00001001
 * 11111111 00000000 00000000 00001010
 * 11111111 00000000 00000000 00001011
 * 11111111 00000000 00000000 00001100
 * 11111111 00000000 00000000 00001101
 * 11111111 00000000 00000000 00001110
 * 11111111 00000000 00000000 00001111
 * <p>
 * 地址 "255.0.0.16/32" 表示与给定地址有相同的 32 位前缀的所有地址，
 * 这里只有 11111111 00000000 00000000 00010000。
 * <p>
 * 总之，答案指定了从 255.0.0.7 开始的 10 个 IP 的范围。
 * <p>
 * 有一些其他的表示方法，例如：
 * ["255.0.0.7/32","255.0.0.8/30", "255.0.0.12/30", "255.0.0.16/32"],
 * 但是我们的答案是最短可能的答案。
 * <p>
 * 另外请注意以 "255.0.0.7/30" 开始的表示不正确，
 * 因为其包括了 255.0.0.4 = 11111111 00000000 00000000 00000100 这样的地址，
 * 超出了需要表示的范围。
 *  
 * <p>
 * 注：
 * <p>
 * ip 是有效的 IPv4 地址。
 * 每一个隐含地址 ip + x (其中 x < n) 都是有效的 IPv4 地址。
 * n 为整数，范围为 [1, 1000]。
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/ip-to-cidr
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class IpToCIDR {

    public List<String> ipToCIDR(String ip, int range) {
        long x = ipToInt(ip);
        List<String> ans = new ArrayList<>();
        while (range > 0) {
            long step = x & -x;
            while (step > range) {
                step /= 2;
            }
            ans.add(longToIp(x, (int) step));
            x += step;
            range -= step;
        }
        return ans;
    }

    private long ipToInt(String str) {
        long sum = 0;
        int num = 0;
        str += '.';
        int len = str.length();
        for (int i = 0; i < len; ++i) {
            if (str.charAt(i) == '.') {
                sum = sum * 256 + num;
                num = 0;
            } else {
                num = 10 * num + str.charAt(i) - '0';
            }
        }
        return sum;
    }

    private String longToIp(long x, int step) {
        int[] ans = new int[4];
        ans[0] = (int) (x & 255);
        x >>= 8;
        ans[1] = (int) (x & 255);
        x >>= 8;
        ans[2] = (int) (x & 255);
        x >>= 8;
        ans[3] = (int) x;
        int len = 33;
        while (step > 0) {
            len--;
            step /= 2;
        }
        return ans[3] + "." + ans[2] + "." + ans[1] + "." + ans[0] + "/" + len;
    }
}
