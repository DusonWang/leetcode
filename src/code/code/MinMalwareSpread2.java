package code.code;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/**
 * (这个问题与尽量减少恶意软件的传播是一样的，不同之处用粗体表示。)
 * <p>
 * 在节点网络中，只有当graph[i][j] = 1时，每个节点i能够直接连接到另一个节点j。
 * <p>
 * 一些节点initial最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。
 * <p>
 * 假设M(initial)是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。
 * <p>
 * 我们可以从初始列表中删除一个节点，并完全移除该节点以及从该节点到任何其他节点的任何连接。如果移除这一节点将最小化M(initial)，则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输出：graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * 输入：0
 * 示例 2：
 * <p>
 * 输入：graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
 * 输出：1
 * 示例 3：
 * <p>
 * 输入：graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
 * 输出：1
 * <p>
 * <p>
 * 提示：
 * <p>
 * 1 < graph.length = graph[0].length <= 300
 * 0 <= graph[i][j] == graph[j][i] <= 1
 * graph[i][i] = 1
 * 1 <= initial.length < graph.length
 * 0 <= initial[i] < graph.length
 * 通过次数1,944提交次数4,682
 * 请问您在哪类招聘中遇到此题？
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/minimize-malware-spread-ii
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class MinMalwareSpread2 {

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        int[] clean = new int[n];
        Arrays.fill(clean, 1);
        for (int x : initial) {
            clean[x] = 0;
        }
        ArrayList<Integer>[] infectedBy = new ArrayList[n];
        for (int i = 0; i < n; ++i) {
            infectedBy[i] = new ArrayList<>();
        }
        for (int u : initial) {
            Set<Integer> seen = new HashSet<>();
            dfs(graph, clean, u, seen);
            for (int v : seen) {
                infectedBy[v].add(u);
            }
        }
        int[] count = new int[n];
        for (int v = 0; v < n; ++v) {
            if (infectedBy[v].size() == 1) {
                count[infectedBy[v].get(0)]++;
            }
        }
        Arrays.sort(initial);
        int ans = initial[0];
        int ansSize = -1;
        for (int u : initial) {
            int score = count[u];
            if (score > ansSize || score == ansSize && u < ans) {
                ans = u;
                ansSize = score;
            }
        }
        return ans;
    }

    public void dfs(int[][] graph, int[] clean, int u, Set<Integer> seen) {
        for (int v = 0; v < graph.length; ++v) {
            if (graph[u][v] == 1 && clean[v] == 1 && !seen.contains(v)) {
                seen.add(v);
                dfs(graph, clean, v, seen);
            }
        }
    }

}
