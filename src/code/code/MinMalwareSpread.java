package code.code;

import java.util.Arrays;

/**
 * 在节点网络中，只有当 graph[i][j] = 1时，每个节点i能够直接连接到另一个节点 j。
 * <p>
 * 一些节点initial最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。
 * <p>
 * 假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。
 * <p>
 * 我们可以从初始列表中删除一个节点。如果移除这一节点将最小化 M(initial)，则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。
 * <p>
 * 请注意，如果某个节点已从受感染节点的列表 initial 中删除，它以后可能仍然因恶意软件传播而受到感染。
 * <p>
 *
 * <p>
 * 示例 1：
 * <p>
 * 输入：graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * 输出：0
 * 示例 2：
 * <p>
 * 输入：graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
 * 输出：0
 * 示例 3：
 * <p>
 * 输入：graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
 * 输出：1
 *
 * <p>
 * 提示：
 * <p>
 * 1 < graph.length = graph[0].length <= 300
 * 0 <= graph[i][j] == graph[j][i] <= 1
 * graph[i][i] == 1
 * 1 <= initial.length < graph.length
 * 0 <= initial[i] < graph.length
 * 通过次数5,376提交次数14,725
 * 请问您在哪类招聘中遇到此题？
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/minimize-malware-spread
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class MinMalwareSpread {

    private int[] p;

    //Union found all nodes.
    //Count the union size of each union set.
    //Count the malware number of each union set.
    //
    //Return the biggest union's malware if there is one and only one malware.
    //If no such union that has and has only one malware,
    //return the malware with minimum index.
    //
    //Time Complexity:
    //O(N^2)
    public int minMalwareSpread(int[][] g, int[] initial) {
        int n = g.length;
        p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (g[i][j] == 1) {
                    union(i, j);
                }
            }
        }
        int[] ufSize = new int[n];
        int[] malCount = new int[n];
        for (int i = 0; i < n; i++) {
            ufSize[find(i)]++;
        }
        for (int init : initial) {
            malCount[find(init)]++;
        }
        int res = -1;
        int maxSize = 0;
        Arrays.sort(initial);
        for (int init : initial) {
            int idx = find(init);
            if (malCount[idx] == 1 && ufSize[idx] > maxSize) {
                maxSize = ufSize[idx];
                res = init;
            }
        }
        if (maxSize != 0) {
            return res;
        } else {
            return initial[0];
        }
    }

    private void union(int i, int j) {
        p[find(i)] = find(j);
    }

    private int find(int i) {
        if (p[i] == i) {
            return i;
        } else {
            p[i] = find(p[i]);
            return p[i];
        }
    }
}
