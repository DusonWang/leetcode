package code.code;

/**
 * @author duson
 * 对于任何字符串，我们可以通过删除其中一些字符（也可能不删除）来构造该字符串的子序列。
 * <p>
 * 给定源字符串?source 和目标字符串?target，找出源字符串中能通过串联形成目标字符串的子序列的最小数量。如果无法通过串联源字符串中的子序列来构造目标字符串，则返回?-1。
 * <p>
 * ?
 * <p>
 * 示例 1：
 * <p>
 * 输入：source = "abc", target = "abcbc"
 * 输出：2
 * 解释：目标字符串 "abcbc" 可以由 "abc" 和 "bc" 形成，它们都是源字符串 "abc" 的子序列。
 * 示例 2：
 * <p>
 * 输入：source = "abc", target = "acdbc"
 * 输出：-1
 * 解释：由于目标字符串中包含字符 "d"，所以无法由源字符串的子序列构建目标字符串。
 * 示例 3：
 * <p>
 * 输入：source = "xyz", target = "xzyxz"
 * 输出：3
 * 解释：目标字符串可以按如下方式构建： "xz" + "y" + "xz"。
 * ?
 * <p>
 * 提示：
 * <p>
 * source 和?target?两个字符串都只包含?"a"-"z"?的英文小写字母。
 * source 和?target?两个字符串的长度介于?1 和?1000?之间。
 * 通过次数961提交次数1,795
 * 在真实的面试中遇到过这道题？
 * <p>
 * 是
 * <p>
 * <p>
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/shortest-way-to-form-string
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class ShortestWay {

    public int shortestWay(String source, String target) {
        int ans = 0;
        int n = source.length();
        int m = target.length();
        int start = 0;
        for (int i = 0; i < m; ++i) {
            int j = 0;
            while (j < n) {
                int idx = (start + j) % n;
                if (idx == 0) {
                    ++ans;
                }
                if (source.charAt(idx) == target.charAt(i)) {
                    break;
                }
                ++j;
            }
            if (j == n) {
                return -1;
            }
            start = (start + j + 1) % n;
        }
        return ans;
    }
}
